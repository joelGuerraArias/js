const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");

const app = express();
app.use(bodyParser.json());

const WHATSAPP_API_URL = "";
const ACCESS_TOKEN = "";
const VERIFY_TOKEN = "mi_verify_token_secreto";
const OPENAI_API_KEY = "";

// NÃºmero de telÃ©fono especÃ­fico para este bot
const BOT_PHONE_NUMBER = "18492549634";

const MODEL_IMAGES = {
  "dashing": "https://fgjpullzone.b-cdn.net/jetour/model-dashing.png",
  "t2": "https://fgjpullzone.b-cdn.net/jetour/model-T2.png",
  "x70": "https://fgjpullzone.b-cdn.net/jetour/model-x70.png",
  "x70plus": "https://fgjpullzone.b-cdn.net/jetour/model-x70plus.png",
  "x90plus": "https://fgjpullzone.b-cdn.net/jetour/model-x90plus.png"
};

app.get("/", (req, res) => {
  res.send("Servidor funcionando correctamente");
});

app.post("/webhook", async (req, res) => {
  try {
    const data = req.body;
    console.log("Received webhook data: ", JSON.stringify(data, null, 2));

    if (data.entry && data.entry[0].changes && data.entry[0].changes[0].value.messages) {
      const messages = data.entry[0].changes[0].value.messages;
      const metadata = data.entry[0].changes[0].value.metadata;
      const receivedPhoneNumber = metadata.display_phone_number || metadata.phone_number;
      
      console.log(`Received message for phone number: ${receivedPhoneNumber}`);
      console.log(`Expected bot phone number: ${BOT_PHONE_NUMBER}`);

      // Verificar si el mensaje estÃ¡ destinado a este bot especÃ­fico
      if (receivedPhoneNumber === BOT_PHONE_NUMBER) {
        for (let message of messages) {
          if (message.type === "text") {
            const senderId = message.from;
            const messageText = message.text.body;
            console.log(`Processing message from ${senderId}: ${messageText}`);
            
            let responseText = await getAutoResponse(messageText);
            await sendWhatsappMessage(senderId, responseText);
            
            const modelRequested = checkForModelRequest(messageText);
            if (modelRequested) {
              await sendModelImage(senderId, modelRequested);
            }
          }
        }
      } else {
        console.log("Message not processed: Phone number mismatch");
      }
    }
    res.sendStatus(200);
  } catch (error) {
    console.error("Error: ", error);
    res.sendStatus(500);
  }
});

app.get("/webhook", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];
  console.log(`Mode: ${mode}, Token: ${token}, Challenge: ${challenge}`);
  if (mode && token === VERIFY_TOKEN) {
    res.status(200).send(challenge);
  } else {
    console.log("Verification token mismatch");
    res.sendStatus(403);
  }
});

function checkForModelRequest(messageText) {
  const lowercaseMessage = messageText.toLowerCase();
  for (const model of Object.keys(MODEL_IMAGES)) {
    if (lowercaseMessage.includes(model)) {
      return model;
    }
  }
  return null;
}

async function sendModelImage(senderId, model) {
  const imageUrl = MODEL_IMAGES[model];
  if (imageUrl) {
    await sendWhatsappImage(senderId, imageUrl, `AquÃ­ tienes una imagen del modelo ${model.toUpperCase()}`);
  }
}

async function sendWhatsappMessage(recipientId, messageText) {
  try {
    const response = await axios.post(
      WHATSAPP_API_URL,
      {
        messaging_product: "whatsapp",
        to: recipientId,
        type: "text",
        text: {
          body: messageText
        }
      },
      {
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("Send WhatsApp Message Response: ", response.data);
  } catch (error) {
    console.error("Error sending WhatsApp message: ", error);
  }
}

async function sendWhatsappImage(recipientId, imageUrl, caption) {
  try {
    const response = await axios.post(
      WHATSAPP_API_URL,
      {
        messaging_product: "whatsapp",
        to: recipientId,
        type: "image",
        image: {
          link: imageUrl,
          caption: caption
        }
      },
      {
        headers: {
          Authorization: `Bearer ${ACCESS_TOKEN}`,
          "Content-Type": "application/json"
        }
      }
    );
    console.log("Send WhatsApp Image Response: ", response.data);
  } catch (error) {
    console.error("Error sending WhatsApp image: ", error);
  }
}

async function getAutoResponse(userInput) {
  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `Eres un vendedor de autos experto. Responde a las siguientes preguntas con la mayor precisiÃ³n posible.
                      **Â¡Bienvenido a Jetour ðŸš™ Dominicana! ðŸš—âœ¨**

                      Nuestro catÃ¡logo de vehÃ­culos combina estilo, rendimiento e innovaciÃ³n, ideal para cualquier aventura que tengas en mente. AquÃ­ tienes una descripciÃ³n rÃ¡pida de nuestros fantÃ¡sticos modelos:

                      **Jetour ðŸš™ X70**:
                      - **Motor**: 1.5L Turbo
                      - **Potencia**: 156 HP
                      - **Asientos**: 7 asientos
                      - **CaracterÃ­sticas**: Techo panorÃ¡mico, cÃ¡mara de 360 grados, asientos de cuero y avanzadas caracterÃ­sticas de seguridad como ABS y mÃºltiples airbags. Ideal para viajes familiares y desplazamientos diarios.

                      **Jetour ðŸš™ X70 Plus**:
                      - **Motor**: 1.5L Turbo
                      - **Potencia**: 156 HP
                      - **Dimensiones**: 474.9 cm (largo) x 190 cm (ancho) x 172 cm (alto)
                      - **CaracterÃ­sticas**: Interior lujoso, espacio de carga ampliado y ayudas a la conducciÃ³n inteligente. Una combinaciÃ³n perfecta de comodidad y utilidad.

                      **Jetour ðŸš™ Dashing**:
                      - **Motor**: 1.5L Turbo
                      - **Potencia**: 156 HP
                      - **Asientos**: 5 asientos
                      - **CaracterÃ­sticas**: DiseÃ±o moderno, tecnologÃ­a de conducciÃ³n inteligente y comodidad premium con asientos de cuero y una base de ruedas de 19 pulgadas. El Dashing se destaca por su aspecto deportivo y opciones de conectividad avanzadas como Apple CarPlay y Android Auto.

                      **Jetour ðŸš™ T2**:
                      - **Motor**: Capacidades robustas para todo terreno
                      - **DiseÃ±o**: Robusto y aventurero, diseÃ±ado para aquellos que buscan emociÃ³n en cada giro.
                      - **CaracterÃ­sticas**: Alta distancia al suelo, construcciÃ³n duradera y comodidades modernas para garantizar confort y seguridad en todos los terrenos.

                      Como tu agente de ventas amigable y experto, estoy aquÃ­ para ayudarte a encontrar el modelo Jetour ðŸš™ perfecto que se ajuste a tu estilo de vida y necesidades. Â¡Comencemos con tu nombre! ðŸ˜Š Â¿CuÃ¡l es tu modelo favorito entre el X70, X70 Plus, Dashing y T2? Â¡No dudes en preguntarme cualquier cosa sobre estos fantÃ¡sticos vehÃ­culos!`
          },
          {
            role: "user",
            content: userInput
          }
        ],
        max_tokens: 150,
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error("Error getting response from OpenAI: ", error.response ? error.response.data : error.message);
    return "Lo siento, hubo un error al procesar tu solicitud.";
  }
}

const listener = app.listen(process.env.PORT || 3000, () => {
  console.log("Your app is listening on port " + listener.address().port);
});



json pkg

{
  "name": "hello-express",
  "version": "0.0.1",
  "description": "A simple Node app built on Express, instantly up and running.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "axios": "^0.21.4",
    "body-parser": "^1.19.0",
    "express": "^4.17.1",
    "openai": "^4.52.0"
  },
  "engines": {
    "node": "14.x"
  },
  "license": "MIT",
  "keywords": [
    "node",
    "glitch",
    "express"
  ]
}
